const mongoose = require('mongoose');
const Lab = require('../models/labsModel');

exports.getLabDescription = async (req, res) => {
    const labId = req.params.labId;
    console.log('Received lab ID:', labId); // Check what labId is received

    if (!mongoose.Types.ObjectId.isValid(labId)) {
        return res.status(400).json({ success: false, message: "Invalid lab ID" });
    }

    try {
        const lab = await Lab.findById(labId);
        if (!lab) {
            return res.status(404).json({ success: false, message: 'Lab not found' });
        }

        const labObj = lab.toObject({ versionKey: false });
        const { _id, ...rest } = labObj;
        const responseData = { id: _id.toString(), ...rest };

        res.status(200).json({ success: true, data: responseData });
    } catch (err) {
        res.status(500).json({ success: false, message: err.message });
    }
};

// controllers/apiController.js

// Filter Labs based on multiple criteria
exports.filterLabs = async (req, res) => {
  console.log("Received filters:", req.query);
  const { accreditation, industries, testingServices, regions } = req.query;

  // Check if no filters are provided
  if (!accreditation && !industries && !testingServices && !regions) {
    return res.status(400).json({
      success: false,
      message: "No filters provided. Please select at least one filter.",
    });
  }

  const filters = {};

  if (accreditation) {
    filters.accreditation = { $in: accreditation.split(',') };
  }

  if (industries) {
    filters.industries = { $in: industries.split(',') };
  }

  if (testingServices) {
    filters.testingServices = { $in: testingServices.split(',') };
  }

  if (regions) {
    filters['profile_menu.additional_location.country'] = { $in: regions.split(',') };
  }

  try {
    // Find labs based on the filters without pagination
    const labs = await Lab.find(filters).populate("user_id", "email");

    if (!labs.length) {
      return res.status(404).json({ success: false, message: "No labs found matching the filters" });
    }

    const transformedLabs = labs.map((lab) => {
      const labObj = lab.toObject({ versionKey: false });
      const { _id, ...rest } = labObj;
      return { id: _id.toString(), ...rest };
    });

    res.status(200).json({
      success: true,
      data: transformedLabs,
    });
  } catch (err) {
    res.status(500).json({ success: false, message: err.message });
  }
};
